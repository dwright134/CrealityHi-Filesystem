# F018
[virtual_sdcard]
#path: /home/rock/gcode_files
path: /usr/data/printer_data/gcodes

[pause_resume]

[display_status]

[gcode_macro PRINTER_PARAM]
variable_z_safe_pause: 0.0
variable_max_x_position: 260.0
variable_max_y_position: 260.0
variable_max_z_position: 300.0
variable_fans: 3
variable_auto_g29: 0
variable_default_bed_temp: 50
variable_default_extruder_temp: 240
variable_g28_extruder_temp: 140
variable_print_calibration: 0
variable_fan0_min: 51
variable_fan0_speed: 0
variable_hotend_temp: 200
variable_default_acc: 12000
gcode:

[gcode_macro STRUCTURE_PARAM]
variable_bed_length: 260
variable_bed_width: 260
variable_bed_hight: 300
variable_laser_x_offset: 45.0
variable_laser_y_offset: -8.0
variable_laser_z_offset: 3.0
variable_cali_x_offset: 200.9
variable_cali_y_offset: 8.9
variable_cali_z_offset: 5.0
gcode:
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_inside_cancel: 0
gcode:
  RESPONSE_INFO MSG="Canceling print"
  SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=inside_cancel VALUE=1
  {% set inside_cancel = printer['gcode_macro CANCEL_PRINT'].inside_cancel|int %}
  RESPONSE_INFO MSG="inside_cancel:{inside_cancel}"
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z + 50 > 305 %}
    {% set pos_z = 305 %}
  {% else %}
    {% set pos_z = printer.toolhead.position.z|float + 50 %}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{pos_z} F1200
  {% else %}
    {action_respond_info("Printer not homed")}
    G28 X Y
  {% endif %}

  CANCEL_PRINT_BASE
  ;BOX_MOVE_TO_CUT
  PAUSE_CUT
;  BOX_END
  FORCE_MOVE_E E=-2
  TURN_OFF_HEATERS
  G1 F3000 X10 Y260
  M400
  M104 S0
  M140 S0
  M107
  M84
  FINISH_INIT

  BOX_END_PRINT
  SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=inside_cancel VALUE=0
  RESPONSE_INFO MSG="inside_cancel:{inside_cancel}"
  RESPONSE_INFO MSG="Print canceled"

  
[gcode_macro MOTOR_CANCEL_PRINT]
gcode:
  EXCLUDE_OBJECT_RESET
  PRINT_PREPARE_CLEAR
  M220 S100
  SET_VELOCITY_LIMIT ACCEL=5000 ACCEL_TO_DECEL=5000
  TURN_OFF_HEATERS
  M107 P1
  M107 P2
  M141 S0
  #SET_PIN PIN=extruder_fan VALUE=0
  BOX_SET_CURRENT_BOX_IDLE_MODE
  CANCEL_PRINT_BASE
  WAIT_TEMP_START

[gcode_macro IF_NEED_HOME]
gcode:
  {% set x_axes = printer.toolhead.homed_axes %}
  {% if x_axes is defined and x_axes[0] is defined %}
    {action_respond_info(
        "x_axes: %s \n"
        % (x_axes))}
  {% else %}
    G28 X Y
  {% endif %}


[gcode_macro PRINT_CALIBRATION]
# This part of the command is replaced by the application side without passing parameters
gcode:
  CX_PRINT_LEVELING_CALIBRATION
  
[gcode_macro FIRST_FLOOR_PAUSE_POSITION]
gcode:
  {% set extruder_temp = printer.custom_macro.g28_ext_temp %}
  M104 S{extruder_temp}
  {% set y_park = printer.toolhead.axis_maximum.y/2 %}
  {% set x_park = printer['gcode_macro PRINTER_PARAM'].max_x_position|float + 1 %}
  G90
  G1 Z2 F600
  G1 X{x_park} Y{y_park} F6000
  G1 Z0.2 F600

[gcode_macro FIRST_FLOOR_RESUME]
description: Resume the first floor print
gcode:
    ##### read E from pause macro #####
  {% set E = printer["gcode_macro FIRST_FLOOR_PAUSE"].extrude|float + 1.0 %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY) %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}

[gcode_macro FIRST_FLOOR_PAUSE]
description: Pause the first floor print
# change this if you need more or less extrusion
variable_extrude: 2.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro FIRST_FLOOR_PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set y_park = printer.toolhead.axis_maximum.y/2 %}
  {% set x_park = printer.toolhead.axis_maximum.x|float - 10.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer["gcode_macro PRINTER_PARAM"].max_z_position|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set z_safe = 0.0 %}
  {% if act_z < (max_z - 2.0) %}
    {% set z_safe = 2.0 %}
  {% elif act_z < max_z %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=z_safe_pause VALUE={z_safe|float}
  PAUSE_BASE
  G91
  {% if "xyz" in printer.toolhead.homed_axes %}
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-1.0 F180
      G1 E-{E} F4000
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    G1 Z{z_safe} F600
    G90
    G1 X{x_park} Y{y_park} F30000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}


[gcode_macro RESPONSE_INFO]
gcode:
  {% set msg = params.MSG | default("response info") %}
  { action_respond_info(msg) }


[gcode_macro DO_COOLING]
gcode:
  {% if printer['gcode_macro IF_CUT_AND_COOLING'].resumed|int == 0 %}
    RESPONSE_INFO MSG="DO_COOLING:Start cooling."
    M104 S0
    RESPONSE_INFO MSG="DO_COOLING:Finish cooling."
  {% else %}
    RESPONSE_INFO MSG="DO_COOLING:Prepare print, no need to cooling."
  {% endif %}

[delayed_gcode COOLING_AFTER_PRINTER_PAUSED];run with reactor lock
gcode:
  {% if printer['print_stats'].state|lower == 'paused' %}
    RESPONSE_INFO MSG="COOLING_AFTER_PRINTER_PAUSED:Printer is paused."
    DO_COOLING
  {% else %}
    RESPONSE_INFO MSG="COOLING_AFTER_PRINTER_PAUSED:Printer is not paused, do nothing."
  {% endif %}

[gcode_macro DO_CUT]
gcode:
  {% if printer['gcode_macro IF_CUT_AND_COOLING'].resumed|int == 0 %}
    RESPONSE_INFO MSG="DO_CUT:Start cut."
    {% set x_park = 0 %}
    {% set y_park = 260 %}
    #BOX_MOVE_TO_CUT
    PAUSE_CUT
    G91
    FORCE_MOVE_E E=-2
    G90
    M104 S140
    M400
    G1 X{x_park} Y{y_park} F6000
    UPDATE_DELAYED_GCODE ID=COOLING_AFTER_PRINTER_PAUSED DURATION=900
    RESPONSE_INFO MSG="DO_CUT:Cut finish."
  {% else %}
    RESPONSE_INFO MSG="DO_CUT:Prepare print, no need to cut and cooling."
  {% endif %}

[delayed_gcode CUT_AND_COOLING_AFTER_PRINTER_PAUSED];run with reactor lock
gcode:
  {% if printer['print_stats'].state|lower == 'paused' %}
    RESPONSE_INFO MSG="CUT_AND_COOLING_AFTER_PRINTER_PAUSED:Printer is paused."
    DO_CUT
    SET_GCODE_VARIABLE MACRO=IF_CUT_AND_COOLING VARIABLE=inside_cut VALUE=0
  {% else %}
    {% if printer['gcode_macro IF_CUT_AND_COOLING'].resumed|int == 0 %}
      RESPONSE_INFO MSG="CUT_AND_COOLING_AFTER_PRINTER_PAUSED:Printer is not paused, waiting."
      UPDATE_DELAYED_GCODE ID=CUT_AND_COOLING_AFTER_PRINTER_PAUSED DURATION=1
    {% else %}
      SET_GCODE_VARIABLE MACRO=IF_CUT_AND_COOLING VARIABLE=inside_cut VALUE=0
      RESPONSE_INFO MSG="CUT_AND_COOLING_AFTER_PRINTER_PAUSED:Prepare print, no need to cut and cooling."
    {% endif %}
  {% endif %}

[gcode_macro IF_CUT_AND_COOLING]
variable_inside_cut: 0
variable_resumed: 0
gcode:
  SET_GCODE_VARIABLE MACRO=IF_CUT_AND_COOLING VARIABLE=resumed VALUE=0
  {% if printer['gcode_macro IF_CUT_AND_COOLING'].inside_cut|int == 0 %}
    {% if printer['motor_control'].cut.state |lower == 'true' %}
      RESPONSE_INFO MSG="IF_CUT_AND_COOLING:Last cut_present value is true, need to cut."
      SET_GCODE_VARIABLE MACRO=IF_CUT_AND_COOLING VARIABLE=inside_cut VALUE=1
      UPDATE_DELAYED_GCODE ID=CUT_AND_COOLING_AFTER_PRINTER_PAUSED DURATION=1
    {% else %}
      RESPONSE_INFO MSG="IF_CUT_AND_COOLING:Last cut_present value is false, no need to cut."
      {% set x_park = 0 %}
      {% set y_park = 260 %}
      G91
      FORCE_MOVE_E E=-2
      G90
      M104 S140
      M400
      G1 X{x_park} Y{y_park} F6000
      RESPONSE_INFO MSG="IF_CUT_AND_COOLING:finish."
    {% endif %}
  {% else %}
    RESPONSE_INFO MSG="IF_CUT_AND_COOLING:Inside cut, no need to cut."
  {% endif %}

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 2.0
gcode:
  {% if printer.pause_resume.is_paused|lower == 'false' %}
    PAUSE_BASE
    PAUSE_EXTERNAL
  {% endif %}

[gcode_macro PAUSE_EXTERNAL]
gcode:
    {% set inside_cancel = printer['gcode_macro CANCEL_PRINT'].inside_cancel|int %}
    RESPONSE_INFO MSG="Pausing print, inside_cancel:{inside_cancel}"
    {% if printer['print_stats'].state|lower == 'cancelled' %}
      RESPONSE_INFO MSG="PAUSE: printer state is not printing."
    {% else %}
      {% if printer['gcode_macro CANCEL_PRINT'].inside_cancel|int == 0 %}
        { action_respond_info("Printer is pausing.\n") }
    ##### read E from pause macro #####
        {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    # {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    # {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}

    ##### calculate save lift position #####
        {% set max_z = printer.toolhead.axis_maximum.z|float %}
        {% set act_z = printer.toolhead.position.z|float %}
        {% if act_z < 48.0 %}
        {% set z_safe = 50.0 - act_z %}
        {% elif act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
        {% else %}
        {% set z_safe = max_z - act_z %}
        {% endif %}
        SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=z_safe_pause VALUE={z_safe|float}
    ##### end of definitions #####
        SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=hotend_temp VALUE={printer.extruder.target}
        {% if printer.extruder.can_extrude|lower == 'true' %}
          G91
          G1 E-1.0 F180
          G1 E-{E} F360
          G90
          {% else %}
            {action_respond_info("Extruder not hot enough")}
          {% endif %}
          {% if "xyz" in printer.toolhead.homed_axes %}
            G91
            G1 Z{z_safe} F600
            G90
            M400
            IF_CUT_AND_COOLING
        {% else %}
          {action_respond_info("Printer not homed")}
        {% endif %}
    ;Printer is canceling, no need to pause
      {% else %}
        {action_respond_info("Printer is canceling, no need to pause")}
      {% endif %}
    {% endif %}
    BOX_TIGHTEN_UP_ENABLE ENABLE=ENABLE

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  BOX_ERROR_CLEAR
  RESUME_EXTERNAL_PROCESS
  RESUME_BASE {get_params}

[gcode_macro RESUME_EXTERNAL_PROCESS]
gcode:
  BOX_ERROR_RESUME_PROCESS
  RESUME_EXTERNAL

[gcode_macro RESUME_EXTERNAL]
gcode:
    {% if printer.pause_resume.resume_err is none or printer.pause_resume.resume_err|lower == 'false' %}
    SET_GCODE_VARIABLE MACRO=IF_CUT_AND_COOLING VARIABLE=resumed VALUE=1
    {% if printer['gcode_macro PRINTER_PARAM'].hotend_temp|int != 0 %}
      {% if printer['gcode_macro PRINTER_PARAM'].hotend_temp|int > printer.extruder.temperature %}
        M109 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
      {% else %}
        M104 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
      {% endif %}
      SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=hotend_temp VALUE=0
    {% endif %}
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float + 60.0 %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    {% set z_resume_move = printer['gcode_macro PRINTER_PARAM'].z_safe_pause|int %}
    {% if z_resume_move > 2 %}
      {% set z_resume_move = z_resume_move - 2 %}
      G91
      G1 Z-{z_resume_move} F600
      M400
    {% endif %}

    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder not hot enough, SET M109 S%s" % 
        printer['gcode_macro PRINTER_PARAM'].hotend_temp|int)}
      M109 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
    {% else %}
      M104 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
    {% endif %}
    {% if printer['gcode_macro PRINTER_PARAM'].hotend_temp|int > printer.extruder.temperature %}
      IF_NEED_HOME
      BOX_GO_TO_EXTRUDE_POS
      #G91
      #G1 E{E} F180
      RESUME_FLUSH LENGTH={E}
      M400
      BOX_NOZZLE_CLEAN
      M109 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
    {% else %}
      RESPONSE_INFO MSG="Last hotend_temp below minimum extruder temperature"
    {% endif %}

    #恢复风扇(暂停前保存的数值)
    {% if printer['gcode_macro PRINTER_PARAM'].fan0_speed > 0 %}
      {% set s_value = (printer['gcode_macro PRINTER_PARAM'].fan0_speed * 255 - printer['gcode_macro PRINTER_PARAM'].fan0_min) * 255 / (255 - printer['gcode_macro PRINTER_PARAM'].fan0_min)|float %}
      M106 S{s_value}
      #冗余操作  恢复值为0
      SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=fan0_speed VALUE=0
    {% endif %} 
    BOX_TIGHTEN_UP_ENABLE ENABLE=DISABLE
    {% endif %}

[gcode_macro M900]
gcode:
  {% if 'K' in params %}
    {% if 'E' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% endif %}
 
[delayed_gcode wait_temp]
# initial_duration: 2.
gcode:
  {% set cur_temp = printer.extruder.temperature %}
  {% if cur_temp|int < 40 %}
    {action_respond_info("end_temp!\n")}
    WAIT_TEMP_END
  {% else %}
    {action_respond_info("cur_temp = %s \n" % (cur_temp))}
    UPDATE_DELAYED_GCODE ID=wait_temp DURATION=5
  {% endif %}

[gcode_macro WAIT_TEMP_START]
gcode:
  UPDATE_DELAYED_GCODE ID=wait_temp DURATION=1
  SET_PIN PIN=fan0 VALUE=127
 
[gcode_macro WAIT_TEMP_END]
gcode:
  UPDATE_DELAYED_GCODE ID=wait_temp DURATION=0
  M106 P0 S0 

[gcode_arcs]#打印圆
resolution: 1.0

[gcode_macro M204]
rename_existing: M204.1
gcode:
  # {% if printer['gcode_macro Qmode'].flag|int == 0 %}
  {% set get_params = "" %}
  {% if 'S' in params|upper %}
    {% set get_params = (get_params + ' ' + 'S' + params.S) %}
  {% endif %}
  {% if 'P' in params|upper %}
    {% set get_params = (get_params + ' ' + 'P' + params.P) %}
  {% endif %}
  {% if 'T' in params|upper %}
    {% set get_params = (get_params + ' ' + 'T' + params.T) %}
  {% endif %}
  M204.1 {get_params}
  # {% endif %}

[gcode_macro M205]
gcode:
  {% if 'X' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
  {% elif 'Y' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
  {% endif %}


[gcode_macro G29]
gcode:
  M140 S60
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  {% set acc = printer["gcode_macro PRINTER_PARAM"].default_acc %}
  M204 S{acc}
  G90
  M107
  NOZ_CLEAR
  SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0

  # 此处Z归位一定要下降,此次光电找平后,不恢复上次做Z_TILT_ADJUST记录的adjustments值
  # 每次调平在上面的重新做Z_TILT_ADJUST,才能得到新的adjustments调整值
  # 设置标志位 ZDOWN的时候 不恢复上次做Z_TILT_ADJUST记录的adjustments值
  SET_ADJUSTMENTS_FLAG VALUE=1

  G28 Z
  BED_MESH_CLEAR
  Z_TILT_ADJUST

  SET_ADJUSTMENTS_FLAG VALUE=0

  BED_MESH_PROFILE LOAD="default" 
  BED_MESH_CALIBRATE
  G1 X130Y130Z10F12000
  M140 S0
  CXSAVE_CONFIG

[gcode_macro CALIBRATE_CUT_POS]
gcode:
  SET_LIMITS
  MOTOR_CHECK_CUT_POS
  M400
  RESTORE_LIMITS

[gcode_macro INPUTSHAPER]
gcode:
  G28
  # CALIBRATE_CUT_POS
  G90
  {% if 'X' in params.AXES|upper %}
    SHAPER_CALIBRATE AXIS=X ROLL_CAL=0
  {% elif 'Y' in params.AXES|upper %}
    SHAPER_CALIBRATE AXIS=Y ROLL_CAL=0
  {% else %}
    SHAPER_CALIBRATE ROLL_CAL=0
  {% endif %}
  CXSAVE_CONFIG

#固定共振补偿模式
[gcode_macro AUTOTUNE_SHAPERS]
variable_autotune_shapers: 'mzv,zv,ei'
gcode:
  

[gcode_macro M106]
gcode:
  {% set fans = printer["gcode_macro PRINTER_PARAM"].fans|int %}
  {% set fan = 0 %}
  {% set value = 0 %}
  {% if params.P is defined %}
  {% set tmp = params.P|int %}
  {% if tmp < fans %}
  {% set fan = tmp %}
  {% endif %}
  {% endif %}
  {% if params.S is defined %}
  {% set tmp = params.S|float %}
  {% else %}
  {% set tmp = 255 %}
  {% endif %}
  {% if tmp > 0 %}
  {% if fan == 0 %}
  {% set value = (255 - printer["gcode_macro PRINTER_PARAM"].fan0_min) / 255 * tmp %}
  {% if printer['gcode_macro Rmode'].flag | int == 0 %}
# SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan0_value VALUE={value}
    {% if tmp > printer['gcode_macro PRINTER_PARAM'].fan0_min * 2  %}
      {% set value = tmp / 2 %}
    {% else %}
      {% set value = printer["gcode_macro PRINTER_PARAM"].fan0_min %}
    {% endif %}
  {% else %}
    {% if tmp < printer['gcode_macro PRINTER_PARAM'].fan0_min %}
      {% set value = printer["gcode_macro PRINTER_PARAM"].fan0_min %}
    {% endif %}
  {% endif %}
  {% endif %}
  {% endif %}
###########################  fan 1 2 #######################
  {% if fan in [1, 2, 3] %}
  RESPONSE_INFO MSG="fan{fan} is not support"
  {% else %}
  {% if value >= 255 %}
  {% set value = 255 %}
  {% endif %}
  RESPONSE_INFO MSG="VALUE: {value}"
  SET_PIN PIN=fan{fan} VALUE={value}
  {% endif %}
##########################  NOT fan 1 2 ####################

[gcode_macro M107]
gcode:
  {% if params.P is defined %}
    SET_PIN PIN=fan0 VALUE=0
  {% else %}
    SET_PIN PIN=fan0 VALUE=0
  {% endif %}


[gcode_macro COOLING_AFTER_LOAD_OR_QUIT_MATERIAL]
gcode:
#优化进退料后喷嘴降温逻辑
  {% if printer_state == "paused" %}
  M104 S140
  {% elif printer_state == "printing" %}
#M104 S140  #不处理
  {% else %}
  M104 S0
  {% endif %}


#进料
[gcode_macro LOAD_MATERIAL]
gcode:
  SAVE_GCODE_STATE NAME=myMoveState
  IF_NEED_HOME
  BOX_GO_TO_EXTRUDE_POS
  FILAMENT_RACK_SAVE_FAN
  FILAMENT_RACK_PRE_FLUSH
  FILAMENT_RACK_SET_TEMP
  FILAMENT_RACK_FLUSH
  FILAMENT_RACK_RESTORE_FAN
  SET_COOL_TEMP
  BOX_MOVE_TO_SAFE_POS
  RESTORE_GCODE_STATE NAME=myMoveState

#退料
[gcode_macro QUIT_MATERIAL]
gcode:
  SAVE_GCODE_STATE NAME=myMoveState
  BOX_GO_TO_EXTRUDE_POS
  FILAMENT_RACK_SET_TEMP
  BOX_MOVE_TO_CUT
  M400
  G91
  G0 E-10 F360
  G90
  M400
  BOX_MOVE_TO_SAFE_POS
  SET_COOL_TEMP
  RESTORE_GCODE_STATE NAME=myMoveState

#擦嘴前挤出
[gcode_macro EXTRUDE_BEFORE_CLEAR]
gcode:
  SAVE_GCODE_STATE NAME=myMoveState
  G91
  G1 E60 F180
  M400
  BOX_NOZZLE_CLEAN
  M104 S0
  RESTORE_GCODE_STATE NAME=myMoveState

#TPU擦嘴前挤出
[gcode_macro TPU_EXTRUDE_BEFORE_CLEAR]
gcode:
  SAVE_GCODE_STATE NAME=myMoveState
  G91
  G1 E60 F60
  M400
  BOX_NOZZLE_CLEAN
  M104 S0
  RESTORE_GCODE_STATE NAME=myMoveState

#多色手动换料
[gcode_macro M600]
gcode:
  PAUSE
  {% set act_e = printer.toolhead.position.e|float %}
  G91
  G1 E20 F180
  G1 E-30 F180
  G1 E-50 F600
  G90
  G92 E{act_e}

[gcode_macro FINISH_INIT]
gcode:
  {% set extruder = printer.configfile.settings['extruder'] %}
  {% set printer = printer.configfile.settings['printer'] %}
  # {% set acc = printer["gcode_macro PRINTER_PARAM"].default_acc %}
  SET_PRESSURE_ADVANCE ADVANCE={extruder.pressure_advance}
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.max_accel_to_decel}
  #转角速度：5mm/s
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5
  #加速度：12000mm/s²
  M204 S12000
  #减速加速度：8000mm/s²
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL=8000
  #移动速率：100%
  M220 S100
  #挤出流量：100%
  M221 S100


[gcode_macro PRINT_TEMP_SET] 
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_WAITTEMP = (120.0|float)|int %}
  {% set WAIT_TEMP = params.WAIT_TEMP|default(0)|int %}
  {% set EXTRUDER_BEDMESHTEMP = (45.0|float)|int %}
  {% set BED_MESH_TEMP = params.BED_MESH_TEMP|default(0)|int %}
  M106 S0  #需要关闭模型风扇
  M140 S{BED_TEMP}
  M104 S{EXTRUDER_WAITTEMP}
  SET_VELOCITY_LIMIT ACCEL=5000 ACCEL_TO_DECEL=5000
  {action_respond_info("print prepared 111")}
  {% if WAIT_TEMP|int == 1 %}
    SET_PIN PIN=fan0 VALUE=127 
    M190 S{BED_TEMP}
    M109 S{EXTRUDER_WAITTEMP}
    M104 S0
    M106 S0
  {% endif %}
  {% if BED_MESH_TEMP|int == 1 %}
    SET_PIN PIN=fan0 VALUE=127
    M190 S{BED_TEMP}
    M109 S{EXTRUDER_BEDMESHTEMP}
    M104 S0
    M106 S0
  {% endif %}

#开始打印宏
[gcode_macro NOZCLEAR_START_PRINT]
gcode:
  G92 E0
  G1 Z3 F600
  M83
  G1 Y100 F12000
  G1 X-2 F12000
  G1 Z0.28 F600
  G1 X-2 Y100 F4000
  G1 X-2 Y-2 E15 F2000
  G1 X60 Y-2 E9  F2000
  M82
  G92 E0


[gcode_macro END_PRINT]
gcode:
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z + 50 > 305 %}
    {% set pos_z = 305 %}
  {% else %}
    {% set pos_z = printer.toolhead.position.z|float + 50 %}
  {% endif %}
  BOX_END
  BOX_END_PRINT
  G1 F3000 X0 Y260 Z{pos_z}
  M104 S0
  M140 S0
  M107
  M84

[gcode_macro START_PRINT]
variable_prepare: 0
gcode:
  Rmode_exit
  BOX_ERROR_CLEAR
  BOX_START_PRINT
  {% set acc = printer["gcode_macro PRINTER_PARAM"].default_acc %}
  G90
  SET_GCODE_OFFSET Z=0
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=10
  M204 S{acc}
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL=8000
  {% set g28_extruder_temp = printer.custom_macro.g28_ext_temp %}
  {% set bed_temp = printer.custom_macro.default_bed_temp %}
  {% set extruder_temp = printer.custom_macro.default_extruder_temp %}
  {% set BED_TEMP = params.BED_TEMP|default(45)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
  {% set EXTRUDER_WAITTEMP = (EXTRUDER_TEMP/1.5|float)|int %}
  # {% set y_park = printer.toolhead.axis_maximum.y/2 %}
  {% if printer['gcode_macro START_PRINT'].prepare|int == 0 %} #fuildd网页打印
    {action_respond_info("print prepared 111")}
    M106 S0  #需要关闭模型风扇
    M140 S{params.BED_TEMP}
    M104 S{EXTRUDER_WAITTEMP}
    G28 X Y
    NOZ_CLEAR
    ZDOWN_SWITCH ENABLE=1
    G28 Z
    BOX_GO_TO_EXTRUDE_POS#M1500
    M190 S{params.BED_TEMP}
    # BOX_NOZZLE_CLEAN#M1501
;    Z_TILT_ADJUST
    # BOX_GO_TO_EXTRUDE_POS#M1500
    ZDOWN_SWITCH ENABLE=0
    #M190 S{params.BED_TEMP}
    # BOX_NOZZLE_CLEAN#M1501
    SET_PIN PIN=fan0 VALUE=127
    M109 S45
    M106 S0
    NEXT_HOMEZ_NACCU
    G28 Z
    BED_MESH_CALIBRATE
    CXSAVE_CONFIG
  {% else %} #其他打印
    {action_respond_info("print prepared 222")}
    PRINT_PREPARE_CLEAR
  {% endif %}
  G0 X0 Y0 Z3 F12000
  M104 S{params.EXTRUDER_TEMP}
  # G1 Z5 F600
  BOX_GO_TO_EXTRUDE_POS#M1500
  M109 S{params.EXTRUDER_TEMP} ;wait nozzle heating
  M140 S{params.BED_TEMP}
  M220 S100 ;Reset Feedrate
  M221 S100 ;Reset Flowrate
  G21
  G92 E0 ; Reset Extruder

[gcode_macro PRINT_PREPARED]
gcode:
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=prepare VALUE=1
  {action_respond_info("print prepared")}

[gcode_macro PRINT_PREPARE_CLEAR]
gcode:
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=prepare VALUE=0

[gcode_macro Qmode]
variable_flag: 0
variable_accel: 0
variable_accel_to_decel: 0
variable_velocity: 0
variable_square_corner_velocity: 0
variable_pressure_advance:0.0
variable_fan0_value: 0.00
variable_fan1_value: 0.00
variable_board_fan_value: 0.00
variable_speed_factor: 0
variable_max_accel: 2500
variable_max_accel_to_decel: 2500
gcode:
  {% set printer_state = printer.print_stats.state %}
  {% if printer['gcode_macro Qmode'].flag|int == 0 %}
     {% if printer_state == "printing" or printer_state == "paused" %}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=accel VALUE={printer.toolhead.max_accel}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=accel_to_decel VALUE={printer.toolhead.max_accel_to_decel}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=velocity VALUE={printer.toolhead.max_velocity}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=square_corner_velocity VALUE={printer.toolhead.square_corner_velocity}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=pressure_advance VALUE={printer.extruder.pressure_advance}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=speed_factor VALUE={printer.gcode_move.speed_factor}


      # Set Motion Parameters
      SET_VELOCITY_LIMIT ACCEL=2500
      SET_VELOCITY_LIMIT ACCEL_TO_DECEL=2500
      SET_VELOCITY_LIMIT VELOCITY=150
      SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5
      SET_PRESSURE_ADVANCE ADVANCE=0.05
      M220 S40

      {% set tmp = printer['output_pin fan0'].value * 255 %}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan0_value VALUE={tmp}
      {% if tmp - printer['gcode_macro PRINTER_PARAM'].fan0_min > (255 - printer['gcode_macro PRINTER_PARAM'].fan0_min) / 2 %}
        {% set tmp = printer['gcode_macro PRINTER_PARAM'].fan0_min + (255 - printer['gcode_macro PRINTER_PARAM'].fan0_min) / 2 %}
        SET_PIN PIN=fan0 VALUE={tmp}
      {% endif %}

      {% set tmp = printer['output_pin board_fan'].value * 1 %}
      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=board_fan_value VALUE={tmp}
      SET_PIN PIN=board_fan VALUE={0}

      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=flag VALUE=1
      SET_QMODE_FLAG FLAG=1
     {% endif %}
  {% endif %}

[gcode_macro Qmode_exit]
gcode:
  {% set printer_state = printer.print_stats.state %}
  {% if printer['gcode_macro Qmode'].flag|int == 1 %}
    {% if printer_state == "printing" or printer_state == "paused" %}
      SET_VELOCITY_LIMIT ACCEL={printer['gcode_macro Qmode'].accel}
      SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer['gcode_macro Qmode'].accel_to_decel}
      SET_VELOCITY_LIMIT VELOCITY={printer['gcode_macro Qmode'].velocity}
      SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer['gcode_macro Qmode'].square_corner_velocity}
      SET_PRESSURE_ADVANCE ADVANCE={printer['gcode_macro Qmode'].pressure_advance}
      M220 S{printer['gcode_macro Qmode'].speed_factor * 100}

    #   {% set X_RUN_CUR = printer.configfile.settings['tmc2209 stepper_x'].run_current %}
    #   {% set Y_RUN_CUR = printer.configfile.settings['tmc2209 stepper_y'].run_current %}
    #   SET_TMC_CURRENT STEPPER=stepper_x CURRENT={X_RUN_CUR}
    #   SET_TMC_CURRENT STEPPER=stepper_y CURRENT={Y_RUN_CUR}
    #   SET_TMC_FIELD STEPPER=stepper_x FIELD=en_spreadcycle VALUE=1
    #   SET_TMC_FIELD STEPPER=stepper_y FIELD=en_spreadcycle VALUE=1
    #   G4 P1000

      {% if printer['output_pin fan0'].value != 0 %}
        {action_respond_info("fan0_value = %s" % printer['gcode_macro Qmode'].fan0_value)}
        SET_PIN PIN=fan0 VALUE={printer['gcode_macro Qmode'].fan0_value}
        SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=fan0_value VALUE=0
      {% endif %}
      SET_PIN PIN=board_fan VALUE={printer['gcode_macro Qmode'].board_fan_value}


      SET_GCODE_VARIABLE MACRO=Qmode VARIABLE=flag VALUE=0
      SET_QMODE_FLAG FLAG=0
    {% endif %}
  {% endif %}

[gcode_macro Rmode]
variable_flag: 0
gcode:
  {% set printer_state = printer.print_stats.state %}
  {% if printer['gcode_macro Rmode'].flag|int == 0 %}
  {% if printer_state == "printing" or printer_state == "paused" %}
  SET_GCODE_VARIABLE MACRO=Rmode VARIABLE=flag VALUE=1
  SET_RMODE_FLAG FLAG=1
  SET_VELOCITY_LIMIT VELOCITY=500
  M220 S166
  SET_PIN PIN=fan0 VALUE=200
  {% endif %}
  {% endif %}

[gcode_macro Rmode_exit]
gcode:
  {% set printer_state = printer.print_stats.state %}
  {% if printer['gcode_macro Rmode'].flag|int == 1 %}
  {% if printer_state == "printing" or printer_state == "paused" %}
  SET_GCODE_VARIABLE MACRO=Rmode VARIABLE=flag VALUE=0
  SET_RMODE_FLAG FLAG=0
  SET_VELOCITY_LIMIT VELOCITY=300
  M220 S100
  SET_PIN PIN=fan0 VALUE=127
  {% endif %}
  {% endif %}


[gcode_macro A_TriPress_STEP1]
gcode:
  G28
  G1 Z25 F600

[gcode_macro A_TriPress_STEP2]
gcode:
  PROBE_ACCURACY PROBE_SPEED=5

[delayed_gcode STARTUP_READ_FILAMENT_RACK_RFID] #开机读RFID，防止开机过程中扫描RFID后，RFID失效问题
initial_duration: 2
gcode:
  {action_respond_info("STARTUP_READ_FILAMENT_RACK_RFID")}
  FILAMENT_RACK

#查看z轴限位开关状态
[gcode_macro zLimit_state]
gcode:
    {% if printer["filament_switch_sensor filament_sensor_4"].filament_detected == True %}
        RESPONSE_INFO MSG="zLimit1_state == True"
    {% else %}
        RESPONSE_INFO MSG="zLimit1_state == false"
    {% endif %}

    {% if printer["filament_switch_sensor filament_sensor_5"].filament_detected == True %}
        RESPONSE_INFO MSG="zLimit2_state == True"
    {% else %}
        RESPONSE_INFO MSG="zLimit2_state == false"
    {% endif %} 
