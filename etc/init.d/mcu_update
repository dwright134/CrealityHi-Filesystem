#!/bin/sh /etc/rc.common

START=13
STOP=90
USE_PROCD=1
DEPEND=boot

PROG=/usr/bin/mcu_util
PROG_485=/usr/bin/mcu_util_485
#PROG_RESET=/usr/bin/mcu_reset.sh
VERSION_FILE=/tmp/.mcu_version
LOG_FILE=/tmp/mcu_update.log
KLIPPER_DIR=/usr/share/klipper
FW_ROOT_DIR=$KLIPPER_DIR/fw

EXTRA_PARAMS_485=
BAUD_460800=460800
BAUD_230400=230400

RET_SUCCESS=0
RET_TIMEOUT=1
RET_ERROR=2

write_log()
{
    [ -e $LOG_FILE ] || touch $LOG_FILE
    echo "[$(date "+%Y-%m-%d %H:%M:%S")] $1" >> $LOG_FILE
}

mcu_handshake()
{
    local ret
    local output
    local tty_path=$1
    output=$(mcu_util -i $tty_path -c)
    ret=$?
    if [ $ret -ne $RET_SUCCESS ]; then
        write_log "$output"
        write_log "handshake $tty_path fail, ret=$ret"
    else
        write_log "handshake $tty_path success"
    fi

    echo $ret
}

get_version()
{
    local version
    local ret
    local tty_path=$1
    version=$(mcu_util -i $tty_path -g)
    ret=$?
    if [ $ret != $RET_SUCCESS ]; then
        write_log "$version"
        write_log "get_version $tty_path fail, ret=$ret"
        echo "unknown"
    else
        write_log "get_version $version"
        echo "$version"
    fi
}

is_invalid_fw_version()
{
    local version=$1
    local fw_version=

    fw_version=$(echo $version | awk 'BEGIN{FS="-"} {print $2} END{}')

    if [ "${fw_version:4:1}" != "_" -o "${fw_version:8:1}" != "_" ]; then
        echo "true"
    else
        echo "false"
    fi
}

compare_version()
{
    local version=$1
    local fw_dir=$2
    local force_update=$3
    local ret_fw_bin=
    local fw_bin=
    local hw_version=
    local fw_version=
    local orig_fw_version=
    local target_fw_version=
    local invalid_fw_version=false
    local tmp=

    # version example: mcu0_110_G32-mcu0_000_000
    hw_version=$(echo $version | awk 'BEGIN{FS="-"} {print $1} END{}')
    fw_version=$(echo $version | awk 'BEGIN{FS="-"} {print $2} END{}')

    invalid_fw_version=$(is_invalid_fw_version $version)
    if [ "$invalid_fw_version" = "true" ]; then
        write_log "get invalid fw version"
    fi

    cd $fw_dir
    if [ $(ls "$hw_version"*.bin | wc -l) -eq 1 ]; then
        fw_bin=$(ls "$hw_version"*.bin)
        tmp=${fw_bin%.*}
        orig_fw_version=${version:18:7}
        target_fw_version=${tmp:18:7}
        if [ "$invalid_fw_version" = "true" -o $force_update = "true" -o "$target_fw_version" != "$orig_fw_version" ]; then
            ret_fw_bin=$fw_dir/$fw_bin
            write_log "old version: $version, will update: $ret_fw_bin"
        fi
    else
        write_log "we should keep only one firmware file for $hw_version board!"
    fi

    echo "$ret_fw_bin"
}

startup_app()
{
    local ret
    local output
    local tty_path=$1
    output=$(mcu_util -i $tty_path -s)
    ret=$?
    if [ $ret -ne $RET_SUCCESS ]; then
        write_log "$output"
        write_log "startup $tty_path fail, ret=$ret"
    else
        write_log "startup app success"
    fi

    echo $ret
}

fw_update()
{
    local ret
    local output
    local tty_path=$1
    local fw_path=$2
    output=$(mcu_util -i $tty_path -u -f $fw_path)
    ret=$?
    if [ $ret -ne $RET_SUCCESS ]; then
        write_log "$output"
        write_log "fw_update $tty_path fail, $fw_path, ret=$ret"
    else
        write_log "fw_update success"
    fi

    echo $ret
}

fw_update_with_no_startup()
{
    local ret
    local output
    local tty_path=$1
    local fw_path=$2
    output=$(mcu_util -i $tty_path -u -f $fw_path -n)
    ret=$?
    if [ $ret -ne $RET_SUCCESS ]; then
        write_log "$output"
        write_log "fw_update $tty_path fail, $fw_path, ret=$ret"
    else
        write_log "fw_update success"
    fi

    echo $ret
}

extruder_update()
{
    local ret
    local output
    local version
    local tty_path=$1
    local fw_dir=$2
    local force_update=$3
    local structure_version=$(get_sn_mac.sh structure_version)
    local model=$(get_sn_mac.sh model)

    output=$(mcu_util -i $tty_path -t)
    ret=$?
    if [ $ret -eq $RET_SUCCESS ]; then
        write_log "enter transparent mode success"

        if [ "x$rs485_serial" != "x" ]; then
            write_log "update fw for all rs485 slave devices_extru"
            /bin/stty -F $rs485_serial $BAUD_230400 cs8 -cstopb -parenb
            echo -ne "\xf7\xeb\x03\xff\x56\xcf" > $rs485_serial
            output=$($PROG_485 -i $rs485_serial -d $FW_ROOT_DIR/$fw_dir -b $BAUD_230400 -c)
            output=$($PROG_485 -i $rs485_serial -d $FW_ROOT_DIR/$fw_dir -b $BAUD_230400 $EXTRA_PARAMS_485 $cfs_params)
            write_log "$output"
        fi

        version=$(get_version $tty_path)
        if [ $version != "unknown" ]; then
            extruder_version=$version
            write_log "extruder_version: $extruder_version"
            fw_bin=$(compare_version $extruder_version $FW_ROOT_DIR/$fw_dir $force_update)
            if [ "x$fw_bin" != "x" ]; then
                output=$(fw_update_with_no_startup $tty_path $fw_bin)
                ret=$?
                if [ $ret -eq $RET_SUCCESS ]; then
                    tmp=$(basename $fw_bin)
                    extruder_version=${tmp%.bin}
                else
                    extruder_version=
                fi
            fi
        fi

        output=$(mcu_util -i $tty_path -e)
        ret=$?
        write_log "exit transparent mode $ret, output: $output"
    else
        ret=$RET_ERROR
        write_log "$output"
        write_log "enter transparent mode fail"

        write_log "update fw for all rs485 slave devices"
        write_log "update fw for all rs485 slave devices"
        stty -F $rs485_serial $BAUD_230400 cs8 -cstopb -parenb
        echo -ne "\xf7\xeb\x03\xff\x56\xcf" > $rs485_serial
        output=$($PROG_485 -i $rs485_serial -d $FW_ROOT_DIR/$fw_dir -b $BAUD_230400 -c)
        output=$($PROG_485 -i $rs485_serial -d $FW_ROOT_DIR/$fw_dir -b $BAUD_230400 $EXTRA_PARAMS_485 $cfs_params)
        write_log "$output"
    fi

    echo $ret
}

auto_update()
{
    # from libubox
    . /usr/share/libubox/jshn.sh

    local model=$(get_sn_mac.sh model)
    local board=$(get_sn_mac.sh board)
    local structure_version=$(get_sn_mac.sh structure_version)
    local fw_dir=
    cfs_update=${CFS}
    cfs_params=

    local mcu0_serial=
    local bed0_serial=
    local noz0_serial=
    rs485_serial=

    local mcu0_ready=false
    local bed0_ready=false
    local noz0_ready=false

    local mcu0_force_update=false
    local bed0_force_update=false
    local noz0_force_update=false
    local extruder_force_update=false

    local mcu0_version=unknown
    local bed0_version=unknown
    local noz0_version=unknown
    extruder_version=unknown

    local skip_bed0=false
    local need_extruder=false

    local version=unknown
    local ret=0

    case $board in
        "CR0CN240110C10" | "CR0CN240319C13")
            mcu0_serial=/dev/ttyS2
            bed0_serial=/dev/ttyS4
            noz0_serial=/dev/ttyS3
            rs485_serial=/dev/ttyS5

            if [ -e $mcu0_serial -a -e $bed0_serial -a -e $noz0_serial -a -e $rs485_serial ]; then

                if [ "$model" = "CR-K1" -o "$model" = "CR-K1 Max" ]; then
                    fw_dir=K1
                elif [ "$model" = "F008" ]; then
                    fw_dir=F008
                    skip_bed0=true
                    need_extruder=true
                else
                    fw_dir=
                fi
            fi
            ;;
        "CR4NU200360C2"*)
            mcu0_serial=/dev/ttyS2
            bed0_serial=/dev/ttyS4
            noz0_serial=/dev/ttyS3
            rs485_serial=/dev/ttyS5

            if [ -e $mcu0_serial -a -e $bed0_serial -a -e $noz0_serial -a -e $rs485_serial ]; then

                if [ "$model" = "F009" ]; then
                    fw_dir=F009
                elif [ "$model" = "F010" ]; then
                    fw_dir=F010
                elif [ "$model" = "F018" ]; then
                    fw_dir=F018
                    need_extruder=true
                else
                    fw_dir=
                fi
            fi
            ;;
        *)
                fw_dir=
            ;;

    esac

    if [ "x$fw_dir" = "x" -o ! -d $FW_ROOT_DIR/$fw_dir ]; then
        exit 1
    fi

    if [ "x$cfs_update" = "x1" ]; then
        cfs_params="-j /tmp/cfs_update.json"
    fi

    echo "fw_dir: $fw_dir"

    json_init

    if [ "x$mcu0_serial" != "x" -a -e $mcu0_serial ]; then
        ret=$(mcu_handshake $mcu0_serial)
        if [ $ret -eq $RET_SUCCESS ]; then
            mcu0_ready=true
            write_log "mcu0 ready"
        else
            mcu0_ready=false
        fi
        
        if [ "x$FORCE" = "xmcu0" ]; then
            mcu0_force_update=true
        fi
    fi

    if [ $skip_bed0 = "false" -a "x$bed0_serial" != "x" -a -e $bed0_serial ]; then
        ret=$(mcu_handshake $bed0_serial)
        if [ $ret -eq $RET_SUCCESS ]; then
            bed0_ready=true
            write_log "bed0 ready"
        else
            bed0_ready=false
        fi

        if [ "x$FORCE" = "xbed0" ]; then
            bed0_force_update=true
        fi
    fi

    if [ "x$noz0_serial" != "x" -a -e $noz0_serial ]; then
        ret=$(mcu_handshake $noz0_serial)
        if [ $ret -eq $RET_SUCCESS ]; then
            noz0_ready=true
            write_log "noz0 ready"
            if [ "x$FORCE" = "xextruder" ]; then
                extruder_force_update=true
            fi
            if [ $need_extruder = "true" ]; then
                extruder_update $noz0_serial $fw_dir $extruder_force_update > /dev/null               
            fi
        else
            noz0_ready=false
            if [ "x$rs485_serial" != "x" ]; then
                write_log "update fw for all rs485 slave devices"
                /bin/stty -F $rs485_serial $BAUD_230400 cs8 -cstopb -parenb
                echo -ne "\xf7\xeb\x03\xff\x56\xcf" > $rs485_serial
                output=$($PROG_485 -i $rs485_serial -d $FW_ROOT_DIR/$fw_dir -b $BAUD_230400 -c)
                output=$($PROG_485 -i $rs485_serial -d $FW_ROOT_DIR/$fw_dir -b $BAUD_230400 $EXTRA_PARAMS_485 $cfs_params)
                write_log "$output"
            fi
        fi

        if [ "x$FORCE" = "xnoz0" ]; then
            noz0_force_update=true
        fi
    fi

    if [ $mcu0_ready = "true" ]; then
        version=$(get_version $mcu0_serial)
        if [ $version != "unknown" ]; then
            mcu0_version=$version
            write_log "mcu0_version: $mcu0_version"
            fw_bin=$(compare_version $mcu0_version $FW_ROOT_DIR/$fw_dir $mcu0_force_update)
            if [ "x$fw_bin" != "x" ]; then
                ret=$(fw_update $mcu0_serial $fw_bin)
                if [ $ret -eq $RET_SUCCESS ]; then
                    tmp=$(basename $fw_bin)
                    mcu0_version=${tmp%.bin}
                else
                    mcu0_version=
                fi
            else
                ret=$(startup_app $mcu0_serial)
            fi
        fi
    elif [ $mcu0_ready = "false" ]; then
        mcu0_version=
    fi

    if [ "x$mcu0_ready" != "x" ]; then
        json_add_object "mcu0"
        json_add_string "serial" $mcu0_serial
        json_add_string "version" $mcu0_version
        json_close_object
    fi

    if [ $bed0_ready = "true" ]; then
        version=$(get_version $bed0_serial)
        if [ $version != "unknown" ]; then
            bed0_version=$version
            write_log "bed0_version: $bed0_version"
            fw_bin=$(compare_version $bed0_version $FW_ROOT_DIR/$fw_dir $bed0_force_update)
            if [ "x$fw_bin" != "x" ]; then
                ret=$(fw_update $bed0_serial $fw_bin)
                if [ $ret -eq $RET_SUCCESS ]; then
                    tmp=$(basename $fw_bin)
                    bed0_version=${tmp%.bin}
                else
                    bed0_version=
                fi
            else
                ret=$(startup_app $bed0_serial)
            fi
        fi
    elif [ $bed0_ready = "false" ]; then
        bed0_version=
    fi

    if [ $skip_bed0 = "false" -a "x$bed0_ready" != "x" ]; then
        json_add_object "bed0"
        json_add_string "serial" $bed0_serial
        json_add_string "version" $bed0_version
        json_close_object
    fi

    if [ $noz0_ready = "true" ]; then
        version=$(get_version $noz0_serial)
        if [ $version != "unknown" ]; then
            noz0_version=$version
            write_log "noz0_version: $noz0_version"
            fw_bin=$(compare_version $noz0_version $FW_ROOT_DIR/$fw_dir $noz0_force_update)
            if [ "x$fw_bin" != "x" ]; then
                ret=$(fw_update $noz0_serial $fw_bin)
                if [ $ret -eq $RET_SUCCESS ]; then
                    tmp=$(basename $fw_bin)
                    noz0_version=${tmp%.bin}
                else
                    noz0_version=
                fi
            else
                ret=$(startup_app $noz0_serial)
            fi
        fi
    elif [ $noz0_ready = "false" ]; then
        noz0_version=
    fi

    if [ "x$noz0_ready" != "x" ]; then
        json_add_object "noz0"
        json_add_string "serial" $noz0_serial
        json_add_string "version" $noz0_version
        json_close_object

        if [ "x$need_extruder" = "xtrue" ]; then
            json_add_object "extruder"
            json_add_string "serial" $noz0_serial
            json_add_string "version" $extruder_version
            json_close_object
        fi
    fi

    json_dump > $VERSION_FILE
    json_cleanup

}

start_service()
{
    [ -x $PROG ] || {
        echo "not found $PROG!"
        exit 1
    }
    
#    $($PROG_RESET enable)
#    $($PROG_RESET)

    auto_update
}

stop_service()
{

    . /usr/share/libubox/jshn.sh

    local model=$(get_sn_mac.sh model)
    local board=$(get_sn_mac.sh board)
    local structure_version=$(get_sn_mac.sh structure_version)

    rs485_serial=


    case $board in
        "CR4NU200360C2"*)
            rs485_serial=/dev/ttyS5
            /bin/stty -F $rs485_serial $BAUD_230400 cs8 -cstopb -parenb
            echo -ne "\xf7\xeb\x03\xff\x56\xcf" > $rs485_serial

            ;;
        *)
            ;;

    esac
}
